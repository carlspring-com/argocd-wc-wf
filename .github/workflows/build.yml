name: Build
on:
  push:
    branches:
      - 'production'
      - 'demo'
      - 'main'
      - '[0-9]+**'
      - '[a-zA-Z]+/[0-9]+**'
      - '!old/**'
      - '!nobuild/**'
  workflow_call:
  workflow_dispatch:

permissions:
  contents: write
  issues: read
  checks: write
  pull-requests: write
  # Needed to push docker images.
  packages: write

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          # The Gradle wrapper's version (already the default, putting it here to clarity)
          gradle-version: wrapper
          # Removing unused files from Gradle User Home before saving to cache (i.e. older versions of gradle)
          gradle-home-cache-cleanup: true
          # Cache downloaded JDKs in addition to the default directories.
          gradle-home-cache-includes: |
            caches
            notifications
            jdks
          # Only write to the cache for builds on the 'main' and 'release' branches. (Default is 'main' only.)
          # Builds on other branches will only read existing entries from the cache.
          #cache-read-only: ${{ github.ref != 'refs/heads/main'  }}

      - name: "Configure image name"
        run: |
          branch=${GITHUB_REF#refs/heads/}
          runNumber=${{ github.run_number }}
          if [[ ${branch} =~ [0-9]+ ]]; then
            case="${BASH_REMATCH}"
            branchId="${case}"
          else
            branchId="${branch}"
          fi
          
          imageTag="${branchId}-${runNumber}" >> "$GITHUB_ENV"
          imageTagLatest="${branchId}-latest" >> "$GITHUB_ENV"

          echo "imageTag=${imageTag}" >> "$GITHUB_ENV"
          ehco "imageRepo=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}" >> "$GITHUB_ENV"
          echo "imageName=${imageRepo}:${imageTag}" >> "$GITHUB_ENV"

      - name: Build modules and docker image
        run: |
          ./gradlew build bootBuildImage --imageName="${imageName}" --scan --stacktrace

      - name: Docker Push
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io --username "${{ github.actor }}" --password-stdin
          docker image tag "${imageName}" "${imageRepo}:${imageTagLatest}"
          docker push --all-tags "${imageName}"


  # deploy:
  #   runs-on: ubuntu-22.04
  #   timeout-minutes: 30
  #   needs: [ build ]
  #   if: success() && github.ref != 'refs/heads/main'
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         repository: 'steve-todorov/argocd-wc-wf-gitops'

  #     - name: Setup git user
  #       run: |
  #         git config user.name ${{ github.actor }}
  #         git config user.email 41898282+github-actions[bot]@users.noreply.github.com
  #         git remote add gh-token "https://${{ secrets.PAT }}@github.com/steve-todorov/argocd-wc-wf-gitops.git"

  #     - name: Determine Branch Name
  #       id: branch-name
  #       run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"

  #     - name: Create and Checkout Branch
  #       run: |
  #         git checkout -b ${{ steps.branch-name.outputs.branch }} || echo "Git branch already ${{ steps.branch-name.outputs.branch }}"

  #     - name: Create Example File
  #       run: echo "This is an example file." > example.txt

  #     - name: Create PR
  #       uses: peter-evans/create-pull-request@v5
  #       id: pr
  #       with:
  #         token: ${{ secrets.PAT }}
  #         author: "${{ github.actor }} <41898282+github-actions[bot]@users.noreply.github.com>"
  #         commit-message: "${{ steps.branch-name.outputs.branch }} auto generated pr"
  #         title: "example"
  #         body: ""
  #         labels: automated pr
  #         branch: ${{ steps.branch-name.outputs.branch }}
  #         #delete-branch: true
